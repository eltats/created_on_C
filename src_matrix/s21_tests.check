#include <check.h>
#include "s21_matrix.h"


#test s21_create_matrix_1
    matrix_t one = s21_create_matrix(4,4);
  ck_assert_int_eq(one.matrix_type, 3);
  s21_remove_matrix(&one);
#test s21_create_matrix_2
    matrix_t two = s21_create_matrix(-1,4);
  ck_assert_int_eq(two.matrix_type, 1);
  s21_remove_matrix(&two);


#test s21_remove_matrix_1
    matrix_t one = s21_create_matrix(4,4);
    s21_remove_matrix(&one);
  ck_assert_int_eq(one.matrix_type, 1);
#test s21_remove_matrix_2
    matrix_t one = s21_create_matrix(0,-1);
    s21_remove_matrix(&one);
  ck_assert_int_eq(one.matrix_type, 1);


#test s21_eq_matrix_1
  matrix_t one = s21_create_matrix(4,4);
  matrix_t two = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 0;
  one.matrix[0][2] = 0;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 0;
  one.matrix[2][0] = 0;
  one.matrix[2][1] = 0;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0;
  one.matrix[3][0] = 0;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0;
  one.matrix[3][3] = 1;
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 0);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
#test s21_eq_matrix_2
  matrix_t one = s21_create_matrix(4,4);
  matrix_t two = s21_create_matrix(4,4);
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 1);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
#test s21_eq_matrix_3
  matrix_t one = s21_create_matrix(3,4);
  matrix_t two = s21_create_matrix(4,4);
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 0);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);


#test s21_sum_matrix_1
  matrix_t one = s21_create_matrix(4,4);
  matrix_t two = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 0;
  one.matrix[0][2] = 0;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 0;
  one.matrix[2][0] = 0;
  one.matrix[2][1] = 0;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0;
  one.matrix[3][0] = 0;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0;
  one.matrix[3][3] = 1;
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 0);
   matrix_t four = s21_sum_matrix(&one, &two);
   ck_assert_int_eq(four.matrix_type, 2);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
   s21_remove_matrix(&four);
#test s21_sum_matrix_2
  matrix_t one = s21_create_matrix(4,4);
  matrix_t two = s21_create_matrix(4,4);
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 1);
   matrix_t four = s21_sum_matrix(&one, &two);
   ck_assert_int_eq(four.matrix_type, 3);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
    s21_remove_matrix(&four);
#test s21_sum_matrix_3
  matrix_t one = s21_create_matrix(4,4);
  matrix_t two = s21_create_matrix(3,4);
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(free, 0);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   matrix_t four = s21_sum_matrix(&one, &two);
   ck_assert_int_eq(four.matrix_type, 1);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
   s21_remove_matrix(&four);

 #test s21_sum_matrix_4
  matrix_t one = s21_create_matrix(4,4);
  matrix_t two = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 0;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 0;
  one.matrix[2][1] = 0;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0;
  one.matrix[3][0] = 2.123;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0;
  one.matrix[3][3] = 1;
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 0);
   matrix_t four = s21_sum_matrix(&one, &two);
   ck_assert_int_eq(four.matrix_type, 0);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
   s21_remove_matrix(&one);
   s21_remove_matrix(&four);


#test s21_sub_matrix_1
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 0;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 0;
  one.matrix[2][1] = 0;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0;
  one.matrix[3][0] = 2.123;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0;
  one.matrix[3][3] = 1;
  matrix_t two = s21_create_matrix(4,4);
  two.matrix[0][0] = 1;
  two.matrix[0][1] = 0;
  two.matrix[0][2] = 3;
  two.matrix[0][3] = 0;
  two.matrix[1][0] = 0;
  two.matrix[1][1] = 1;
  two.matrix[1][2] = 0;
  two.matrix[1][3] = 4;
  two.matrix[2][0] = 0;
  two.matrix[2][1] = 0;
  two.matrix[2][2] = 1;
  two.matrix[2][3] = 0;
  two.matrix[3][0] = 2.123;
  two.matrix[3][1] = 0;
  two.matrix[3][2] = 0;
  two.matrix[3][3] = 1;
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 1);
   matrix_t four = s21_sub_matrix(&one, &two);
   ck_assert_int_eq(four.matrix_type, 3);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
   s21_remove_matrix(&one);
   s21_remove_matrix(&four);
#test s21_sub_matrix_2
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 32;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 112;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 312;
  one.matrix[2][1] = 112;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0.123;
  one.matrix[3][0] = 2.123;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0.123123;
  one.matrix[3][3] = 1;
  matrix_t two = s21_create_matrix(4,4);
  two.matrix[0][0] = 1;
  two.matrix[0][1] = 0;
  two.matrix[0][2] = 3;
  two.matrix[0][3] = 0;
  two.matrix[1][0] = 0;
  two.matrix[1][1] = 1;
  two.matrix[1][2] = 0;
  two.matrix[1][3] = 4;
  two.matrix[2][0] = 0;
  two.matrix[2][1] = 0;
  two.matrix[2][2] = 1;
  two.matrix[2][3] = 0;
  two.matrix[3][0] = 2.123;
  two.matrix[3][1] = 0;
  two.matrix[3][2] = 0;
  two.matrix[3][3] = 1;
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 0);
   matrix_t four = s21_sub_matrix(&one, &two);
   ck_assert_int_eq(four.matrix_type, 0);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
   s21_remove_matrix(&one);
   s21_remove_matrix(&four);
#test s21_sub_matrix_3
  matrix_t one = s21_create_matrix(3,4);
  matrix_t two = s21_create_matrix(4,4);
  two.matrix[0][0] = 1;
  two.matrix[0][1] = 0;
  two.matrix[0][2] = 3;
  two.matrix[0][3] = 0;
  two.matrix[1][0] = 0;
  two.matrix[1][1] = 1;
  two.matrix[1][2] = 0;
  two.matrix[1][3] = 4;
  two.matrix[2][0] = 0;
  two.matrix[2][1] = 0;
  two.matrix[2][2] = 1;
  two.matrix[2][3] = 0;
  two.matrix[3][0] = 2.123;
  two.matrix[3][1] = 0;
  two.matrix[3][2] = 0;
  two.matrix[3][3] = 1;
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, 3);
   ck_assert_int_eq(two.matrix_type, 3);
   ck_assert_int_eq(free, 0);
   matrix_t four = s21_sub_matrix(&one, &two);
   ck_assert_int_eq(four.matrix_type, 1);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
   s21_remove_matrix(&one);
   s21_remove_matrix(&four);
#test s21_sub_matrix_4
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 2;
  one.matrix[0][1] = 0;
  one.matrix[0][2] = 0;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 2;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 0;
  one.matrix[2][0] = 0;
  one.matrix[2][1] = 0;
  one.matrix[2][2] = 2;
  one.matrix[2][3] = 0;
  one.matrix[3][0] = 0;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0;
  one.matrix[3][3] = 2;
  matrix_t two = s21_create_matrix(4,4);
  two.matrix[0][0] = 1;
  two.matrix[0][1] = 0;
  two.matrix[0][2] = 0;
  two.matrix[0][3] = 0;
  two.matrix[1][0] = 0;
  two.matrix[1][1] = 1;
  two.matrix[1][2] = 0;
  two.matrix[1][3] = 0;
  two.matrix[2][0] = 0;
  two.matrix[2][1] = 0;
  two.matrix[2][2] = 1;
  two.matrix[2][3] = 0;
  two.matrix[3][0] = 0;
  two.matrix[3][1] = 0;
  two.matrix[3][2] = 0;
  two.matrix[3][3] = 1;
  int free = s21_eq_matrix(&one, &two);
   ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
   ck_assert_int_eq(two.matrix_type, ZERO_MATRIX);
   ck_assert_int_eq(free, FAILURE);
   matrix_t four = s21_sub_matrix(&one, &two);
   ck_assert_int_eq(four.matrix_type, IDENTITY_MATRIX);
   s21_remove_matrix(&one);
   s21_remove_matrix(&two);
   s21_remove_matrix(&one);
   s21_remove_matrix(&four);

#test s21_mult_number_1
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 32;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 112;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 312;
  one.matrix[2][1] = 112;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0.123;
  one.matrix[3][0] = 2.123;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0.123123;
  one.matrix[3][3] = 1;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_mult_number(&one, 12);
  ck_assert_int_eq(two.matrix_type, CORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
#test s21_mult_number_2
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 32;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 112;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 312;
  one.matrix[2][1] = 112;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0.123;
  one.matrix[3][0] = 2.123;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0.123123;
  one.matrix[3][3] = 1;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_mult_number(&one, NAN);
  ck_assert_int_eq(two.matrix_type, INCORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
#test s21_mult_number_3
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 32;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 112;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 312;
  one.matrix[2][1] = 112;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0.123;
  one.matrix[3][0] = 2.123;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0.123123;
  one.matrix[3][3] = 1;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_mult_number(&one, 0);
  ck_assert_int_eq(two.matrix_type, ZERO_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);

#test s21_mult_matrix_1
 matrix_t one = s21_create_matrix(4, 4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 0;
  one.matrix[0][2] = 4;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 3;
  one.matrix[2][0] = 0;
  one.matrix[2][1] = 0;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0;
  one.matrix[3][0] = 2;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0;
  one.matrix[3][3] = 1;
  matrix_t two = s21_create_matrix(4, 2);
  two.matrix[0][0] = 1;
  two.matrix[0][1] = 0;
  two.matrix[1][0] = 0;
  two.matrix[1][1] = 1;
  two.matrix[2][0] = 0;
  two.matrix[2][1] = 0;
  two.matrix[3][0] = 2;
  two.matrix[3][1] = 0;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  ck_assert_int_eq(two.matrix_type, ZERO_MATRIX);
  matrix_t three = s21_mult_matrix(&one,&two);
  ck_assert_int_eq(three.matrix_type, CORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
  s21_remove_matrix(&three);
#test s21_mult_matrix_2
 matrix_t one = s21_create_matrix(4, 4);
  matrix_t two = s21_create_matrix(6, 2);
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  ck_assert_int_eq(two.matrix_type, ZERO_MATRIX);
  matrix_t three = s21_mult_matrix(&one,&two);
  ck_assert_int_eq(three.matrix_type, INCORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
  s21_remove_matrix(&three);
#test s21_mult_matrix_3
 matrix_t one = s21_create_matrix(4, 4);
  one.matrix[0][0] = 0;
  one.matrix[0][1] = 0;
  one.matrix[0][2] = 0;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 0;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 0;
  one.matrix[2][0] = 0;
  one.matrix[2][1] = 0;
  one.matrix[2][2] = 0;
  one.matrix[2][3] = 0;
  one.matrix[3][0] = 0;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0;
  one.matrix[3][3] = 0;
  matrix_t two = s21_create_matrix(4, 2);
  two.matrix[0][0] = 1;
  two.matrix[0][1] = 0;
  two.matrix[1][0] = 0;
  two.matrix[1][1] = 1;
  two.matrix[2][0] = 0;
  two.matrix[2][1] = 0;
  two.matrix[3][0] = 2;
  two.matrix[3][1] = 0;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  ck_assert_int_eq(two.matrix_type, ZERO_MATRIX);
  matrix_t three = s21_mult_matrix(&one,&two);
  ck_assert_int_eq(three.matrix_type, ZERO_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
  s21_remove_matrix(&three);

#test s21_transpose_1
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 32;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 112;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 312;
  one.matrix[2][1] = 112;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0.123;
  one.matrix[3][0] = 2.123;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0.123123;
  one.matrix[3][3] = 1;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_transpose(&one);
  ck_assert_int_eq(two.matrix_type, CORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
#test s21_transpose_2
  matrix_t one;
  one.rows = 4;
  one.columns = 6;
  one.matrix_type = INCORRECT_MATRIX;
  ck_assert_int_eq(one.matrix_type, INCORRECT_MATRIX);
  matrix_t two = s21_transpose(&one);
  ck_assert_int_eq(two.matrix_type, INCORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
#test s21_transpose_3
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 0;
  one.matrix[0][1] = 0;
  one.matrix[0][2] = 0;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 0;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 0;
  one.matrix[2][0] = 0;
  one.matrix[2][1] = 0;
  one.matrix[2][2] = 0;
  one.matrix[2][3] = 0;
  one.matrix[3][0] = 0;
  one.matrix[3][1] = 0;
  one.matrix[3][2] = 0;
  one.matrix[3][3] = 0;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_transpose(&one);
  ck_assert_int_eq(two.matrix_type, ZERO_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);

#test s21_calc_complements_1
  matrix_t one = s21_create_matrix(3,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 32;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 112;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 312;
  one.matrix[2][1] = 112;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0.123;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_calc_complements(&one);
  ck_assert_int_eq(two.matrix_type, INCORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
#test s21_calc_complements_2
  matrix_t one = s21_create_matrix(4,4);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 32;
  one.matrix[0][2] = 3;
  one.matrix[0][3] = 0;
  one.matrix[1][0] = 112;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[1][3] = 4;
  one.matrix[2][0] = 312;
  one.matrix[2][1] = 112;
  one.matrix[2][2] = 1;
  one.matrix[2][3] = 0.123;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_calc_complements(&one);
  ck_assert_int_eq(two.matrix_type, CORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
#test s21_calc_complements_3
  matrix_t one = s21_create_matrix(1,1);
  one.matrix[0][0] = 0.23;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_calc_complements(&one);
  ck_assert_int_eq(two.matrix_type, IDENTITY_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
#test s21_calc_complements_4
  matrix_t one = s21_create_matrix(4,4);
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  matrix_t two = s21_calc_complements(&one);
  ck_assert_int_eq(two.matrix_type, ZERO_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
#test s21_calc_complements_5
  matrix_t one = s21_create_matrix(3,3);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 2;
  one.matrix[0][2] = 3;
  one.matrix[1][0] = 0;
  one.matrix[1][1] = 4;
  one.matrix[1][2] = 2;
  one.matrix[2][0] = 5;
  one.matrix[2][1] = 2;
  one.matrix[2][2] = 1;
  matrix_t two = s21_create_matrix(3,3);
  two.matrix[0][0] = 0;
  two.matrix[0][1] = 10;
  two.matrix[0][2] = -20;
  two.matrix[1][0] = 4;
  two.matrix[1][1] = -14;
  two.matrix[1][2] = 8;
  two.matrix[2][0] = -8;
  two.matrix[2][1] = -2;
  two.matrix[2][2] = 4;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  ck_assert_int_eq(two.matrix_type, ZERO_MATRIX);
  matrix_t three = s21_calc_complements(&one);
  for(int i = 0; i < three.rows; ++i){
    for (int j = 0; j < three.columns; ++j){
      ck_assert_double_eq(two.matrix[i][j], three.matrix[i][j]);
    }
  }
  ck_assert_int_eq(three.matrix_type, CORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&two);
  s21_remove_matrix(&three);

#test s21_determinant_1
  matrix_t one = s21_create_matrix(3,4);
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  double two = s21_determinant(&one);
  ck_assert_double_nan(two);
  s21_remove_matrix(&one);
#test s21_determinant_2
  matrix_t one = s21_create_matrix(3,3);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 32;
  one.matrix[0][2] = 3;
  one.matrix[1][0] = 112;
  one.matrix[1][1] = 1;
  one.matrix[1][2] = 0;
  one.matrix[2][0] = 312;
  one.matrix[2][1] = 112;
  one.matrix[2][2] = 1;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  double two = s21_determinant(&one);
  ck_assert_double_eq(two,33113);
  s21_remove_matrix(&one);
#test s21_determinant_3
  matrix_t one = s21_create_matrix(3,3);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 2;
  one.matrix[0][2] = 3;
  one.matrix[1][0] = 4;
  one.matrix[1][1] = 5;
  one.matrix[1][2] = 6;
  one.matrix[2][0] = 7;
  one.matrix[2][1] = 8;
  one.matrix[2][2] = 9;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  double two = s21_determinant(&one);
  ck_assert_double_eq(two,0);
  s21_remove_matrix(&one);

#test s21_inverse_matrix_1
  matrix_t one = s21_create_matrix(3,3);
  one.matrix[0][0] = 1;
  one.matrix[0][1] = 2;
  one.matrix[0][2] = 3;
  one.matrix[1][0] = 4;
  one.matrix[1][1] = 5;
  one.matrix[1][2] = 6;
  one.matrix[2][0] = 7;
  one.matrix[2][1] = 8;
  one.matrix[2][2] = 9;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  double two = s21_determinant(&one);
  ck_assert_double_eq(two,0);
  matrix_t three = s21_inverse_matrix(&one);
  ck_assert_int_eq(three.matrix_type, INCORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&three);
#test s21_inverse_matrix_2
  matrix_t one = s21_create_matrix(2,3);
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  double two = s21_determinant(&one);
  ck_assert_double_nan(two);
  matrix_t three = s21_inverse_matrix(&one);
  ck_assert_int_eq(three.matrix_type, INCORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&three);
#test s21_inverse_matrix_3
  matrix_t one = s21_create_matrix(3,3);
  one.matrix[0][0] = 5;
  one.matrix[0][1] = -6;
  one.matrix[0][2] = 12;
  one.matrix[1][0] = 2;
  one.matrix[1][1] = 3;
  one.matrix[1][2] = -2;
  one.matrix[2][0] = 1;
  one.matrix[2][1] = 3;
  one.matrix[2][2] = 9;
  ck_assert_int_eq(one.matrix_type, ZERO_MATRIX);
  double two = s21_determinant(&one);
  ck_assert_double_eq(two,321);
  matrix_t three = s21_inverse_matrix(&one);
  ck_assert_int_eq(three.matrix_type, CORRECT_MATRIX);
  s21_remove_matrix(&one);
  s21_remove_matrix(&three);